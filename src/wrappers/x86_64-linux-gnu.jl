# Autogenerated wrapper script for x265_jll for x86_64-linux-gnu
export libx265, x265

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `libx265`
const libx265_splitpath = ["lib", "libx265.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libx265_path = ""

# libx265-specific global declaration
# This will be filled out by __init__()
libx265_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libx265 = "libx265.so.169"


# Relative path to `x265`
const x265_splitpath = ["bin", "x265"]

# This will be filled out by __init__() for all products, as it must be done at runtime
x265_path = ""


# x265-specific global declaration
x265(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true) =
    executable_wrapper(f, x265_path, PATH, LIBPATH, LIBPATH_env, LIBPATH_default, ':', adjust_PATH, adjust_LIBPATH)

"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"x265")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list

    global libx265_path, libx265_handle
    libx265_path, libx265_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libx265_splitpath)

    global x265_path = get_exe_path!(PATH_list, artifact_dir, x265_splitpath)

    global PATH, LIBPATH
    PATH, LIBPATH = cleanup_path_libpath!(PATH_list, LIBPATH_list, ':')

end  # __init__()
